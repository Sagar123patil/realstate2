#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <cstdlib> // For exit()

using namespace std;

class Property {
private:
    string address;
    double price;
    bool isAvailable;

public:
    Property(string addr, double prc) : address(addr), price(prc), isAvailable(true) {}

    void displayInfo() {
        cout << "Address: " << address << endl;
        cout << "Price: $" << price << endl;
        cout << (isAvailable ? "Available" : "Not Available") << endl;
    }

    void setAvailability(bool available) {
        isAvailable = available;
    }

    string getAddress() {
        return address;
    }

    double getPrice() {
        return price;
    }

    bool getAvailability() {
        return isAvailable;
    }
};

class Client {
private:
    string name;
    vector<Property*> properties;

public:
    Client(string n) : name(n) {}

    void addProperty(Property* prop) {
        properties.push_back(prop);
    }

    void displayProperties() {
        cout << "Properties owned by " << name << ":" << endl;
        for (Property* prop : properties) {
            prop->displayInfo();
        }
    }

    string getName() {
        return name;
    }
};

class RealEstateAgency {
private:
    vector<Property> properties;
    vector<Client> clients;

public:
    void addProperty(Property prop) {
        properties.push_back(prop);
    }

    void addClient(Client client) {
        clients.push_back(client);
    }

    void displayProperties() {
        cout << "Properties available for sale:" << endl;
        for (Property prop : properties) {
            prop.displayInfo();
        }
    }

    void displayClients() {
        cout << "Registered clients:" << endl;
        for (Client client : clients) {
            cout << client.getName() << endl;
        }
    }

    vector<Property>& getProperties() {
        return properties;
    }

    vector<Client>& getClients() {
        return clients;
    }

    // Function to save property and client data to file
    void saveDataToFile() {
        ofstream file("realestate_data.txt");
        if (!file.is_open()) {
            cerr << "Error opening file for writing!" << endl;
            exit(1);
        }

        // Save properties
        file << "Properties:" << endl;
        for (Property prop : properties) {
            file << prop.getAddress() << "," << prop.getPrice() << "," << prop.getAvailability() << endl;
        }

        // Save clients
        file << "Clients:" << endl;
        for (Client client : clients) {
            file << client.getName() << ",";
            for (Property* prop : client.getProperties()) {
                file << prop->getAddress() << ",";
            }
            file << endl;
        }

        file.close();
        cout << "Data saved successfully!" << endl;
    }

    // Function to load property and client data from file
    void loadDataFromFile() {
        ifstream file("realestate_data.txt");
        if (!file.is_open()) {
            cerr << "Error opening file for reading!" << endl;
            exit(1);
        }

        string line;
        string section;
        while (getline(file, line)) {
            if (line == "Properties:") {
                section = "Properties";
            } else if (line == "Clients:") {
                section = "Clients";
            } else {
                if (section == "Properties") {
                    string address;
                    double price;
                    bool availability;
                    stringstream ss(line);
                    getline(ss, address, ',');
                    ss >> price;
                    ss.ignore(); // Ignore the comma
                    ss >> availability;
                    properties.push_back(Property(address, price));
                } else if (section == "Clients") {
                    string name;
                    stringstream ss(line);
                    getline(ss, name, ',');
                    Client client(name);
                    string propAddress;
                    while (getline(ss, propAddress, ',')) {
                        for (Property& prop : properties) {
                            if (prop.getAddress() == propAddress) {
                                client.addProperty(&prop);
                                break;
                            }
                        }
                    }
                    clients.push_back(client);
                }
            }
        }

        file.close();
        cout << "Data loaded successfully!" << endl;
    }
};

void menu() {
    cout << "===== Real Estate Management System =====" << endl;
    cout << "1. Add Property" << endl;
    cout << "2. Add Client" << endl;
    cout << "3. Display Properties" << endl;
    cout << "4. Display Clients" << endl;
    cout << "5. Save Data to File" << endl;
    cout << "6. Load Data from File" << endl;
    cout << "7. Exit" << endl;
    cout << "=========================================" << endl;
    cout << "Enter your choice: ";
}

int main() {
    RealEstateAgency agency;

    int choice;
    do {
        menu();
        cin >> choice;
        cin.ignore(); // Clear the input buffer

        switch (choice) {
            case 1: {
                string address;
                double price;
                cout << "Enter property address: ";
                getline(cin, address);
                cout << "Enter property price: $";
                cin >> price;
                agency.addProperty(Property(address, price));
                break;
            }
            case 2: {
                string name;
                cout << "Enter client name: ";
                getline(cin, name);
                agency.addClient(Client(name));
                break;
            }
            case 3:
                agency.displayProperties();
                break;
            case 4:
                agency.displayClients();
                break;
            case 5:
                agency.saveDataToFile();
                break;
            case 6:
                agency.loadDataFromFile();
                break;
            case 7:
                cout << "Exiting program..." << endl;
                break;
            default:
                cout << "Invalid choice! Please try again." << endl;
        }
    } while (choice != 7);

    return 0;
}
